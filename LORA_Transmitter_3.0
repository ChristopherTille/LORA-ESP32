// import libraries
#include <LoRa.h>
#include <SPI.h>
#include <Wire.h>
#include <BH1750.h>
#include "DHT.h"     
#include "esp_deep_sleep.h"   
#include <ADS1115_WE.h>        

#define I2C_ADDRESS1 0x48 /* I2C address for ADS1115_1 */
#define I2C_ADDRESS2 0x49 /* I2C address for ADS1115_2 (control case) */
#define I2C_ADDRESS3 0x23 /* I2C address for BH1750 */

#define ss 18
#define rst 14
#define dio0 26

#define DHTPIN 13 /* define pins for DHT22 temperature and air humidity sensor */
#define DHTTYPE DHT22 /* define type of sensor */

#define uS_TO_S_FACTOR 1000000ULL  /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  15        /* Time ESP32 will go to sleep (in seconds) */

DHT dht(DHTPIN, DHTTYPE); /* initialize DHT sensor */
BH1750 lightMeter; /* initialize BH1750 */

ADS1115_WE adc1 = ADS1115_WE(I2C_ADDRESS1); /*initialize ADS object */
ADS1115_WE adc2 = ADS1115_WE(I2C_ADDRESS2); /*initialize ADS object */

int pumpcounter = 0;


void setup() {
  Serial.begin(9600); /* initialize Serial Monitor */
  Serial.println("Started microcontroller.");
  SPI.begin(5, 19, 27, 18);
  LoRa.setPins(ss, rst, dio0);
  if (!LoRa.begin(868E6)) {
    Serial.println("Start of LoRa failed!");
    while (1);
  }
  Wire.begin(21, 22);
  lightMeter.begin(); /* start BH1750 sensor */
  dht.begin(); /* start DHT22 sensor */

  pinMode(23, OUTPUT); /* set GPIO for water pump relay */
  pinMode(25, OUTPUT); /* set GPIO for powering ADC pins */
  pinMode(12, OUTPUT); /* set GPIO for powering ADS (I2C) inputs */
  
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR); /* set deep sleep timer to specified seconds */ 
  
  if(!adc1.init()){
    Serial.println("ADS1115 not connected!");
  }
  
  adc1.setVoltageRange_mV(ADS1115_RANGE_6144); /* comment line/change parameter to change range */
  adc2.setVoltageRange_mV(ADS1115_RANGE_6144); /* comment line/change parameter to change range */

  int no_of_readings = 7;
  float lux = 0.0;
  float air_humidity = 0.0;
  float temperature = 0.0;
  float soil_moisture_10 = 0.0;
  float soil_moisture_20 = 0.0;
  float soil_moisture_11 = 0.0;
  float soil_moisture_21 = 0.0;
  float soil_moisture_12 = 0.0;
  float soil_moisture_22 = 0.0;
  float soil_moisture_13 = 0.0;
  float soil_moisture_23 = 0.0;
  
  for (int i = 0; i < no_of_readings; i++) {
    lux += lightMeter.readLightLevel(); /* read light sensor */
    air_humidity += dht.readHumidity(); /* read air humidity sensor */
    temperature += dht.readTemperature();
    soil_moisture_10 += readChannel1(ADS1115_COMP_0_GND);
    soil_moisture_20 += readChannel2(ADS1115_COMP_0_GND);
    soil_moisture_11 += readChannel1(ADS1115_COMP_1_GND);
    soil_moisture_21 += readChannel2(ADS1115_COMP_1_GND);
    soil_moisture_12 += readChannel1(ADS1115_COMP_2_GND);
    soil_moisture_22 += readChannel2(ADS1115_COMP_2_GND);
    soil_moisture_13 += readChannel1(ADS1115_COMP_3_GND);
    soil_moisture_23 += readChannel2(ADS1115_COMP_3_GND);
    
    Serial.println("Reading loop NO: "+String(i));
    Serial.println("average lux: "+String((lux/(i+1))));
    Serial.println("average humid: "+String((air_humidity/(i+1))));
    Serial.println("average temp: "+String((temperature/(i+1))));
    Serial.println("average s11: "+String((soil_moisture_10/(i+1))));
    Serial.println("average s12: "+String((soil_moisture_20/(i+1))));
    delay(3000);
  }

  String luxs((lux/no_of_readings));
  String air_humiditys((air_humidity/no_of_readings));
  String temperatures((temperature/no_of_readings));
  String soil_moisture_10s((soil_moisture_10/no_of_readings));
  String soil_moisture_20s((soil_moisture_20/no_of_readings));
  String soil_moisture_11s((soil_moisture_11/no_of_readings));
  String soil_moisture_21s((soil_moisture_21/no_of_readings));
  String soil_moisture_12s((soil_moisture_12/no_of_readings));
  String soil_moisture_22s((soil_moisture_22/no_of_readings));
  String soil_moisture_13s((soil_moisture_13/no_of_readings));
  String soil_moisture_23s((soil_moisture_23/no_of_readings));

  delay(1000);
  String strData = "tag=adc_A0&1value="+String(lux/no_of_readings,2)+"&2value="+String(air_humidity/no_of_readings,2)+"&3value="+String(soil_moisture_10/no_of_readings,2)+"&4value="+String(temperature/no_of_readings,2);
  LoRa.beginPacket();
  LoRa.print(strData);
  LoRa.endPacket();

  delay(1000);
  Serial.println(strData);
  Serial.println("Data uploaded.");
  delay(1000);
  esp_deep_sleep_start();
}

void loop() {

  //esp_deep_sleep_start();
}

float readChannel1(ADS1115_MUX channel) {
  float voltage = 0.0;
  adc1.setCompareChannels(channel);
  adc1.startSingleMeasurement();
  while(adc1.isBusy()){}
  voltage = adc1.getResult_V(); // alternative: getResult_mV for Millivolt
  return voltage;
}

float readChannel2(ADS1115_MUX channel) {
  float voltage = 0.0;
  adc2.setCompareChannels(channel);
  adc2.startSingleMeasurement();
  while(adc2.isBusy()){}
  voltage = adc2.getResult_V(); // alternative: getResult_mV for Millivolt
  return voltage;
}

float average (float * array, int len){
  long sum = 0L;
  for (int i = 0; i < len; i++) {
    sum += array[i];
    
  }
}
