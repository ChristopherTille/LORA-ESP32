// import libraries
//#include <WiFi.h>
//#include <HTTPClient.h>
#include <LoRa.h>
#include <SPI.h>
#include <Wire.h>
#include <BH1750.h>
#include "DHT.h"     
#include "esp_deep_sleep.h"   
//#include <U8x8lib.h>
#include <ADS1115_WE.h>        

#define I2C_ADDRESS1 0x48 /* I2C address for ADS1115_1 */
#define I2C_ADDRESS2 0x49 /* I2C address for ADS1115_2 (control case) */
#define I2C_ADDRESS3 0x23 /* I2C address for BH1750 */

#define ss 18
#define rst 14
#define dio0 26

#define DHTPIN 13 /* define pins for DHT22 temperature and air humidity sensor */
#define DHTTYPE DHT22 /* define type of sensor */

#define uS_TO_S_FACTOR 1000000ULL  /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  15        /* Time ESP32 will go to sleep (in seconds) */

DHT dht(DHTPIN, DHTTYPE); /* initialize DHT sensor */
BH1750 lightMeter; /* initialize BH1750 */

ADS1115_WE adc1 = ADS1115_WE(I2C_ADDRESS1); /*initialize ADS object */
ADS1115_WE adc2 = ADS1115_WE(I2C_ADDRESS2); /*initialize ADS object */

int pumpcounter = 0;
//U8X8_SSD1306_128X64_NONAME_SW_I2C u8x8(15, 4, 16); /* initialize Display ?? */

//const char * ssid = "XXX"; /* set WIFI id */
//const char * password = "XX"; /* set WIFI password */

//String GOOGLE_SCRIPT_ID = "AKfycbxPEDvnBCX7IjHfG7BB3TsWr4niGvzJVREUqMHjnPxLJmMByLoBkBo1kIkVMfJhtn5RCA"; /* set id of Google Script */
//const int sendInterval = 3; 

//updated 04.12.2019
/* const char * root_ca=\
"-----BEGIN CERTIFICATE-----\n" \
"MIIDujCCAqKgAwIBAgILBAAAAAABD4Ym5g0wDQYJKoZIhvcNAQEFBQAwTDEgMB4G\n" \
"A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjIxEzARBgNVBAoTCkdsb2JhbFNp\n" \
"Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDYxMjE1MDgwMDAwWhcNMjExMjE1\n" \
"MDgwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMjETMBEG\n" \
"A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI\n" \
"hvcNAQEBBQADggEPADCCAQoCggEBAKbPJA6+Lm8omUVCxKs+IVSbC9N/hHD6ErPL\n" \
"v4dfxn+G07IwXNb9rfF73OX4YJYJkhD10FPe+3t+c4isUoh7SqbKSaZeqKeMWhG8\n" \
"eoLrvozps6yWJQeXSpkqBy+0Hne/ig+1AnwblrjFuTosvNYSuetZfeLQBoZfXklq\n" \
"tTleiDTsvHgMCJiEbKjNS7SgfQx5TfC4LcshytVsW33hoCmEofnTlEnLJGKRILzd\n" \
"C9XZzPnqJworc5HGnRusyMvo4KD0L5CLTfuwNhv2GXqF4G3yYROIXJ/gkwpRl4pa\n" \
"zq+r1feqCapgvdzZX99yqWATXgAByUr6P6TqBwMhAo6CygPCm48CAwEAAaOBnDCB\n" \
"mTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUm+IH\n" \
"V2ccHsBqBt5ZtJot39wZhi4wNgYDVR0fBC8wLTAroCmgJ4YlaHR0cDovL2NybC5n\n" \
"bG9iYWxzaWduLm5ldC9yb290LXIyLmNybDAfBgNVHSMEGDAWgBSb4gdXZxwewGoG\n" \
"3lm0mi3f3BmGLjANBgkqhkiG9w0BAQUFAAOCAQEAmYFThxxol4aR7OBKuEQLq4Gs\n" \
"J0/WwbgcQ3izDJr86iw8bmEbTUsp9Z8FHSbBuOmDAGJFtqkIk7mpM0sYmsL4h4hO\n" \
"291xNBrBVNpGP+DTKqttVCL1OmLNIG+6KYnX3ZHu01yiPqFbQfXf5WRDLenVOavS\n" \
"ot+3i9DAgBkcRcAtjOj4LaR0VknFBbVPFd5uRHg5h6h+u/N5GJG79G+dwfCMNYxd\n" \
"AfvDbbnvRG15RjF+Cv6pgsH/76tuIMRQyV+dTZsXjAzlAcmgQWpzU/qlULRuJQ/7\n" \
"TBj0/VLZjmmx6BEP3ojY+x1J96relc8geMJgEtslQIxq/H5COEBkEveegeGTLg==\n" \
"-----END CERTIFICATE-----\n"; */

//WiFiClientSecure client; /* initialize WIFI client */ 

void setup() {
  Serial.begin(9600); /* initialize Serial Monitor */
  Serial.println("Started microcontroller.");
  // initialize WIFI connection
  //WiFi.mode(WIFI_STA);
  //WiFi.begin(ssid, password);
  //Serial.print("Connecting to WIFI");
  //int reset_counter_no_connection = 0; /* counter to reset microcontroller after failing to connect to WIFI */
  
  /* while (WiFi.status() != WL_CONNECTED) {
    if (reset_counter_no_connection < 25) {
      Serial.print(".");
      delay(500);
      reset_counter_no_connection++;
    } else {
      ESP.restart();
    }
  } */
  SPI.begin(5, 19, 27, 18);
  LoRa.setPins(ss, rst, dio0);
  //Serial.println("WIFI connected and ready to go!");
  if (!LoRa.begin(868E6)) {
    Serial.println("Start of LoRa failed!");
    while (1);
  }
  Wire.begin(21, 22);
  lightMeter.begin(); /* start BH1750 sensor */
  dht.begin(); /* start DHT22 sensor */

  pinMode(23, OUTPUT); /* set GPIO for water pump relay */
  pinMode(25, OUTPUT); /* set GPIO for powering ADC pins */
  pinMode(12, OUTPUT); /* set GPIO for powering ADS (I2C) inputs */
  
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR); /* set deep sleep timer to specified seconds */ 
  
  if(!adc1.init()){
    Serial.println("ADS1115 not connected!");
  }
  
  adc1.setVoltageRange_mV(ADS1115_RANGE_6144); /* comment line/change parameter to change range */
  adc2.setVoltageRange_mV(ADS1115_RANGE_6144); /* comment line/change parameter to change range */

  int no_of_readings = 7;
  float lux = 0.0;
  float air_humidity = 0.0;
  float temperature = 0.0;
  float soil_moisture_10 = 0.0;
  float soil_moisture_20 = 0.0;
  float soil_moisture_11 = 0.0;
  float soil_moisture_21 = 0.0;
  float soil_moisture_12 = 0.0;
  float soil_moisture_22 = 0.0;
  float soil_moisture_13 = 0.0;
  float soil_moisture_23 = 0.0;
  //float lux[no_of_readings]; /* create array for light sensor readings */
  //float air_humidity[no_of_readings]; /* create array for air humidity sensor readings */
  //float temperature[no_of_readings]; /* create array for temperature sensor readings */
  //float soil_moisture_1[no_of_readings][4]; /* create 2d-array for soil moisture sensors 1 */
  //float soil_moisture_2[no_of_readings][4]; /* create 2d-array for soil moisture sensors 1 */
  for (int i = 0; i < no_of_readings; i++) {
    lux += lightMeter.readLightLevel(); /* read light sensor */
    air_humidity += dht.readHumidity(); /* read air humidity sensor */
    temperature += dht.readTemperature();
    //temperature[i] = dht.readTemperature(); /* read temperature sensor */
    soil_moisture_10 += readChannel1(ADS1115_COMP_0_GND);
    soil_moisture_20 += readChannel2(ADS1115_COMP_0_GND);
    soil_moisture_11 += readChannel1(ADS1115_COMP_1_GND);
    soil_moisture_21 += readChannel2(ADS1115_COMP_1_GND);
    soil_moisture_12 += readChannel1(ADS1115_COMP_2_GND);
    soil_moisture_22 += readChannel2(ADS1115_COMP_2_GND);
    soil_moisture_13 += readChannel1(ADS1115_COMP_3_GND);
    soil_moisture_23 += readChannel2(ADS1115_COMP_3_GND);
    
    Serial.println("Reading loop NO: "+String(i));
    Serial.println("average lux: "+String((lux/(i+1))));
    Serial.println("average humid: "+String((air_humidity/(i+1))));
    Serial.println("average temp: "+String((temperature/(i+1))));
    Serial.println("average s11: "+String((soil_moisture_10/(i+1))));
    Serial.println("average s12: "+String((soil_moisture_20/(i+1))));
    delay(3000);
  }

  

  
  String luxs((lux/no_of_readings));
  String air_humiditys((air_humidity/no_of_readings));
  String temperatures((temperature/no_of_readings));
  String soil_moisture_10s((soil_moisture_10/no_of_readings));
  String soil_moisture_20s((soil_moisture_20/no_of_readings));
  String soil_moisture_11s((soil_moisture_11/no_of_readings));
  String soil_moisture_21s((soil_moisture_21/no_of_readings));
  String soil_moisture_12s((soil_moisture_12/no_of_readings));
  String soil_moisture_22s((soil_moisture_22/no_of_readings));
  String soil_moisture_13s((soil_moisture_13/no_of_readings));
  String soil_moisture_23s((soil_moisture_23/no_of_readings));
  
  //float soilmoisture11 = 0.0;  
  //soilmoisture11 = readChannel1(ADS1115_COMP_0_GND);

  if (pumpcounter%2 == 0) {
    digitalWrite(23, HIGH);
    digitalWrite(25, HIGH);
    digitalWrite(12, HIGH);
  } else {
    digitalWrite(23, LOW);
    digitalWrite(25, LOW);
    digitalWrite(12, LOW);
  }
  
  //String soilmoisture11s(soilmoisture11);
  //String soilmoisture12s(soilmoisture12);
  //String soilmoisture13s(soilmoisture13);
  //String soilmoisture14s(soilmoisture14);
  //String soilmoisture21s(soilmoisture21);
  //String soilmoisture22s(soilmoisture22);
  //String soilmoisture23s(soilmoisture23);
  //String soilmoisture24s(soilmoisture24);
  
  //u8x8.drawString(0, 1, "                ");
  //u8x8.drawString(0, 1, "Reading Sensors.");
  delay(1000);
  LoRa.beginPacket();
  LoRa.print("Lux: ");
  LoRa.println(lux/no_of_readings);
  LoRa.print("Humid: ");
  LoRa.println(air_humidity/no_of_readings);
  LoRa.print("Soil: ");
  LoRa.println(soil_moisture_10/no_of_readings);
  LoRa.print("Temp: ");
  LoRa.println(temperature/no_of_readings);
  LoRa.endPacket();
  //Serial.println("Sensor read");
  delay(1000);
  //sendData("tag=adc_A0&1value="+luxs+"&2value="+air_humiditys+"&3value="+temperatures+"&4value="+soil_moisture_10s+"&5value="+soil_moisture_11s+"&6value="+soil_moisture_12s+"&7value="+soil_moisture_13s+"&8value="+soil_moisture_20s+"&9value="+soil_moisture_21s+"&10value="+soil_moisture_22s+"&11value="+soil_moisture_23s);
  //pumpcounter ++;
  //u8x8.drawString(0, 1, "                  ");
  //u8x8.drawString(0, 1, "Uploading sensor readings.");
  delay(1000);
  Serial.println("Data uploaded.");
  //u8x8.drawString(0, 1, "                            ");
  //u8x8.drawString(0, 1, "Entering Dreamland for 20 sec.");
  delay(1000);
  esp_deep_sleep_start();
}

void loop() {

  //esp_deep_sleep_start();
}

/*void sendData(String params) {
   HTTPClient http;
   String url="https://script.google.com/macros/s/"+GOOGLE_SCRIPT_ID+"/exec?"+params;
   Serial.print(url);
   Serial.print("Making a request");
   http.begin(url, root_ca); //Specify the URL and certificate
   int httpCode = http.GET();  
   http.end();
   Serial.println(": done "+httpCode);
}*/

float readChannel1(ADS1115_MUX channel) {
  float voltage = 0.0;
  adc1.setCompareChannels(channel);
  adc1.startSingleMeasurement();
  while(adc1.isBusy()){}
  voltage = adc1.getResult_V(); // alternative: getResult_mV for Millivolt
  return voltage;
}

float readChannel2(ADS1115_MUX channel) {
  float voltage = 0.0;
  adc2.setCompareChannels(channel);
  adc2.startSingleMeasurement();
  while(adc2.isBusy()){}
  voltage = adc2.getResult_V(); // alternative: getResult_mV for Millivolt
  return voltage;
}

float average (float * array, int len){
  long sum = 0L;
  for (int i = 0; i < len; i++) {
    sum += array[i];
    
  }
}
